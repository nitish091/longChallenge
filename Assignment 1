Name   : Suchit Kumar
Roll No: 05724802019
Sem    : BCA 2nd sem

                        Assignment 1

Ques 1: What is difference between Linked list and array
ans:
Array
1.Arrays are collection of data of similar datatypes, stored contigous
in memory.
2.Each element of array are represented using indexes 0 to n-1
where n is the size of array.
3.accesing random element in array is fast.
4.Operations like insertion, deletion etc. consumes lots of time.
5.Arrays are of fixed size.

Linked list
1.it is a non-primitive data structure contains a collection of 
unordered linked elements known as nodes.
2.each node contains pointer or address of other node and data 
to be stored.
3.Accessing elements in linked list takes linear time so insertion
is little bit slower.
4.Operations like insertion deletion etc takes much less time than 
arrays.
5.Linked list are dynamic.

========================================================================

Ques 2:
ans:
#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    Node* next;
};
int c; //to store number of nodes in linkedlist;

Node* start,curr,prv;
void Addbefore(int data,int n){
    struct Node *node=(Node*)malloc(sizeof(Node));
    node->data=data;
    node->next=NULL;

    if(start==NULL){
        start=node;
    }
    else{
        curr=start;
        while(curr!=NULL){
            if((i+1)==n){
                prv->next=node;
                node->next=curr;
                c++; //number of node incremented by 1
                break;
            }
            prv=curr;
            curr=curr->next;
        }   
    }
}
int count(){
    int cnt=0;
    
    if(start!=NULL){
        curr=start;
        while(curr!=NULL){
            cnt++;
            curr=curr->next;
        }
    }
    return cnt;
}
int main(){
    c=count();
    int n,data;
    do{
        cout<<"\nEnter number of node to add new node before of:";
        cin>>n;
    }while(n<=cnt);
    cout<<"Enter data to be inserted:";
    cin>>data;
    cout<<"\nNumber of nodes in linked list:"<<c;
    return 0;
}

======================================================================

Ques 3:
ans:
Procedure:
Step 1- check if linked list is empty or not. i.e.
    "start!=NULL";if yes print list is empty. and exit
step 2-if not then 
    intialise "curr" and "prv"(pointers of struct node type) with start 
step 3-and make "start" to point "start->next";
step 4- run a loop(while) with condition to access last element of linked
list l:
    while(curr!=null){
        curr=curr->next;
    }
step 5-now make "curr->next" to point "prv".
step 6-make "prv->next=NULL".
step 7-End 
